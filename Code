
#installing the necessary packages to run code
install.packages("janitor")
install.packages("countrycode")
install.packages("lubridate")
install.packages("tsoutliers")

#installing necessary libraries
library(tidyverse) # data wrangling
library(tibble) # ?ata wrangling
library(janitor) # column naming
library(countrycode) # country codes
library(lubridate) # date times
library(readxl) # excel import
library(zoo) # calculate rolling averages
library(R.utils) # R utilities
library(stringr) # to parse strings ?n R
library(tsoutliers) # remove outliers
library(dplyr) # data wrangling


########################################################################
###########    DATA PROCESSING -- EXTRACT, TRANSFORM, LOAD    ##########
##################################?#####################################



#set working directory (folder where files are stored, and where you will store R files)
setwd("C:\\Users\\bthrift\\Documents\\Projects\\FIND Map")

## WHO Region Background

# import csv of WHO region countries (ht?ps://rockfound.box.com/s/0o8u4d1k97a0ldze3idkz0hgt4f4asr1)
find_clean <- read.csv("C:\\Users\\bthrift\\Documents\\Projects\\FIND Map\\who_regions.csv") %>%
  # standardize names with this janitor function
  clean_names() %>%
  # rename columns name
  renam?(name = country_name)


#################################################################
###########   WHO GENOMIC SEQUENCE TESTING CAPACITY    ##########
#################################################################

## WHO testing capacity data

# i?port excel from FIND sources https://rockfound.box.com/s/3kj4wkmkgpktmb6z03r49nyta6lb64i5
who_testing_raw <- read_excel("C:\\Users\\bthrift\\Documents\\Projects\\FIND Map\\2021_04_04_FIND_capacity_mapping_data_sources.xlsx",
                              s?eet = "Country classification",
                              skip = 1) %>%
  # standardize names with this janitor function
  clean_names()

# remove buffer rows by iso code and select code and testing capacity columns
who_testing_clean <- who_testing_raw?%>%
  # remove rows with country code x
  filter(country_code != "x") %>%
  # remove rows with country code ""
  filter(country_code != "") %>%
  # remove rows with country code " "
  filter(country_code != " ") %>%
  # drop all columns except iso code and?WHO testing capacity
  select(contains("code"), starts_with("testing_capacity_"))

# define who testing capacity column for later reference
who_testing_column <- colnames(who_testing_clean)[max(ncol(who_testing_clean))]

# assign who_testing_capacity varia?le a label
who_testing_clean$who_testing_capacity <- case_when(
  # 0: "0 - No reliable testing capacity" or 0
  # 1: "1 - Reliable testing capacity" or 1
  who_testing_clean[ , who_testing_column] == 0 ~ 0,
  who_testing_clean[ , who_testing_column] == "0?- No reliable testing capacity" ~ 0,
  who_testing_clean[ , who_testing_column] == 1 ~ 1,
  who_testing_clean[ , who_testing_column] == "1 - Reliable testing capacity" ~ 1)

# select only code and who_testing_capacity variables
who_testing_clean <- who_tes?ing_clean %>%
  select(contains("code"), matches("who_testing_capacity"))

# find_clean: merge WHO testing data into template
find_clean <- left_join(find_clean, who_testing_clean, by = c("code" = "country_code"))




######################################?#############
###########   OWID TESTING POLICY DATA    ##########
####################################################

## Our World In data testing policy data

# import csv from OWID (https://raw.githubusercontent.com/OxCGRT/covid-policy-tracker/master/?ata/OxCGRT_latest.csv)
owid_testing_raw <- read.csv("C:\\Users\\bthrift\\Documents\\Projects\\FIND Map\\covid-19-testing-policy.csv") %>%
  # standardize names with this janitor function
  clean_names() %>%
  select(date, code = country_code, testing_polic? = h2_testing_policy) %>%
  filter(is.na(testing_policy) == F)

# add dashes to date
owid_testing_raw$date <- paste(substr(owid_testing_raw$date, 1, 4), substr(owid_testing_raw$date, 5, 6), substr(owid_testing_raw$date, 7, 8), sep = '-')

# select most rec?nt testing policy entry for each country and select country code and testing policy columns
owid_testing_clean <- owid_testing_raw %>%
  # group by country code
  group_by(code) %>%
  # select most recent entry for each country
  filter(as.Date(date) == ma?(as.Date(date)))

# deduplicate any repeated countries
owid_testing_clean <- owid_testing_clean[!duplicated(owid_testing_clean$code),]

# create owid_testing_capacity variable
owid_testing_clean <- owid_testing_clean %>%
  # 0: "No testing policy"
  # 1: a?y testing policy
  mutate(
    owid_testing_capacity = case_when(
      testing_policy >= 1 ~ 1,
      testing_policy == 0 ~ 0
    )
  ) %>%
  # select code and owid_testing_capacity columns
  select(code, owid_testing_capacity)

# find_clean: merge OWID t?sting capacity data into template
find_clean <- left_join(find_clean, owid_testing_clean, by = "code")




###############################################################################
###########   FIND TESTING CAPACITY (MAX IN 30 DAY WINDOW) METRIC    ?#########
###############################################################################

## FIND Testing Metric

# import csv from FIND (https://github.com/dsbbfinddx/FINDCov19TrackerData/blob/master/processed/data_all.csv)
find_testing_raw <- read.csv("?:\\Users\\bthrift\\Documents\\Projects\\FIND Map\\data_all.csv") %>%
  # standardize names with this janitor function
  clean_names()

# select and rename necessary columns
find_testing_clean <- find_testing_raw %>%
  # filter for country set
  filter(set ?= "country") %>%
  # select time, code, new_tests_corrected, pop_100k, cap_new_tests, all_new_tests
  select(name, time, unit, pop_100k, cap_new_tests, cap_cum_tests, all_new_tests, all_cum_cases, all_cum_tests) %>%
  # rename columns as date, code, pop_10?k, new_tests_cap, new_tests_all
  rename(country = name, date = time, code= unit, pop_100k = pop_100k, new_tests_cap = cap_new_tests, new_tests_all = all_new_tests, cap_cum_tests = cap_cum_tests, all_cum_cases = all_cum_cases, all_cum_tests = all_cum_tests? %>%
  # parse date as date class
  mutate(date = as.Date(date, format = "%Y-%m-%d"))

# create country code column
find_testing_clean <- find_testing_clean %>%
  mutate(code = countrycode(country, origin = 'country.name', destination = 'iso3c'))

# insert? missing country codes
find_testing_clean$code[find_testing_clean$country == "Kosovo"] <- "XKX"
find_testing_clean$code[find_testing_clean$country == "SÃ£o TomÃ© & PrÃncipe"] <- "STP"
find_testing_clean$code[find_testing_clean$country == "Namibia"] <- "NAM?

# 14 day rolling average function
# robust_rollmean_14Day <- function(x) {
#   outliers <- tsoutliers(x) # find and remove outliers due to reporting or due to addition of RDTs in the testing dataset
#   outliers <- outliers$index
#   x[outliers] <- NA
# ? ans <- data.table::frollmean(x, 14, na.rm = TRUE)
#   no_of_obs <- data.table::frollsum(!is.na(x), 14, na.rm = T, fill = 0)
#   ans[no_of_obs <= 10] <- NA #at least 10 values in the vector should be non NA, to give a result, else NA
#   ans
# }
# Apply th? 14-day rolling mean to daily test numbers per country ---------
# cap_test_14Day_max <- lapply(unique(data_all_countries_$`Country code`), function(x){
#   message(x)
#   df <- subset(data_all_countries_, `Country code` == x)
#   df <- arrange(df, date)
#?  if(all(is.na(df$all_new_tests)) == T){
#     df$cap_new_tests_14Day <- NA
#   }else{
#     df$cap_new_tests_14Day <- round(robust_rollmean_14Day(df$all_new_tests)/df$pop_100k, digits = 2)
#   }
#   df
#   
# })
# 
# cap_test_14Day_max <- do.call(rbind, c?p_test_14Day_max)

# create variable for 30 day rolling average of new tests per capita
find_testing_clean <- find_testing_clean %>%
  # group rows by country code
  group_by(code) %>%
  # create column for 30 day rolling average
  mutate(
    new_tests_ca?_avg = round(zoo::rollmean(new_tests_cap, 30, fill = NA),2)
  )


# display max 30 day rolling average of new tests per capita for each country
find_testing_clean <- find_testing_clean %>%
  group_by(code) %>%
  mutate(
    max_new_tests_cap_avg = max(new_?ests_cap_avg, na.rm = T),
    cap_cum_tests = max(cap_cum_tests, na.rm = T),
    cum_tpr = max(all_cum_cases, na.rm = T)/max(all_cum_tests, na.rm = T),
  )

#********error message of warning signs, IF wanting to see the warning signs.
warnings(find_testing?clean)

# display one row for each country
find_testing_clean <- find_testing_clean[!duplicated(find_testing_clean$code),]

# remove any -Inf
find_testing_clean$max_new_tests_cap_avg <- ifelse(find_testing_clean$max_new_tests_cap_avg < 0, NA, find_testing_?lean$max_new_tests_cap_avg)

# remove any Inf
find_testing_clean$cum_tpr <- ifelse(find_testing_clean$cum_tpr < 0 | find_testing_clean$cum_tpr > 1, NA, find_testing_clean$cum_tpr)

# select code, pop_100k, cap_cum_tests, and max_new_tests_cap_avg columns
f?nd_testing_clean <- find_testing_clean %>%
  select(code, pop_100k, max_new_tests_cap_avg, cap_cum_tests, cum_tpr)

# find_clean: merge FIND testing data into template
find_clean <- left_join(find_clean, find_testing_clean, by = "code")

# quartile divisio? of max_new_tests_cap_avg
find_testing_quantile <- quantile(find_testing_clean$max_new_tests_cap_avg, na.rm = T)




###############################################################
###########   DIAGNOSTIC DEVICE ACCESS CLASSIFIER    ##########
###########?###################################################


## Dx Testing Capacity Classifier

# create Dx Testing Capacity Classifier variable
# Variable indicating highest level of diagnostic throughput (Low testing capacity, Medium testing capacity, High test?ng capacity)
# Variable is based on FIND testing dashboard
# If FIND source missing for that country, take source OWD
find_clean <- find_clean %>%
  # create new variable for Dx testing capacity based on:
  # FIND testing capacity
  # OWID testing Capacity?  mutate(
    # "0-49.99": < 50 max_new_tests_cap_avg in FIND
    # "50-99.99": >= 10 & < 100 max_new_tests_cap_avg in FIND
    # "100+": >= 100 max_new_tests_cap_avg in FIND
    # "0-49.99": NA in FIND
    dx_testing_capacity = case_when(
      max_new_te?ts_cap_avg >= 50 & who_testing_capacity == 1 ~ "Reliable testing capacity",
      max_new_tests_cap_avg >= 50 & who_testing_capacity == 0 ~ "Reliable testing capacity",
      max_new_tests_cap_avg >= 50 & is.na(who_testing_capacity) == T ~ "Reliable testin? capacity",
      max_new_tests_cap_avg < 50 & who_testing_capacity == 1 ~ "Reliable testing capacity",
      max_new_tests_cap_avg < 50 & who_testing_capacity == 0 ~ "Unreliable testing capacity",
      max_new_tests_cap_avg < 50 & is.na(who_testing_capac?ty) == T ~ "Unreliable testing capacity",
      is.na(max_new_tests_cap_avg) == T & who_testing_capacity == 1 ~ "Reliable testing capacity",
      is.na(max_new_tests_cap_avg) == T & who_testing_capacity == 0 ~ "Unreliable testing capacity",
      is.na(ma?_new_tests_cap_avg) == T & is.na(who_testing_capacity) == T ~ "Unreliable testing capacity"
    )
  )


###########################################################################
###########    NGS GENOMIC SEQUENCING FACILITY ACCESS    ##################
?##########################################################################


## WHO NGS Capacity + NGS Install Bases

# import excel from FIND sources https://rockfound.box.com/s/3kj4wkmkgpktmb6z03r49nyta6lb64i5
ngs_raw <- read_excel("C:\\Users\\bthrift\\D?cuments\\Projects\\FIND Map\\2021_04_04_FIND_capacity_mapping_data_sources.xlsx",
                      sheet = "Country classification",
                      skip = 1) %>%
  # standardize names with this janitor function
  clean_names()

# remove buffer ?ows by iso code and select code and ngs capacity columns
ngs_clean <- ngs_raw %>%
  # remove rows with country code x
  filter(country_code != "x") %>%
  # remove rows with country code ""
  filter(country_code != "") %>%
  # remove rows with country code ? "
  filter(country_code != " ") %>%
  # drop all columns except iso code and NGS capacity
  select(contains("code"), starts_with("ngs_capacity_"))

# define NGS capacity column for later reference
ngs_capacity_column <- colnames(ngs_clean)[max(ncol(ngs_cl?an))]

# assign ngs_capacity variable a label
ngs_clean$ngs_capacity <- case_when(
  # 0: "0 - 0 NGS facilities" or 0
  # 1: "1 - 1-3 NGS facilities or equivalent" or 1
  # 2: "2 - 4+ NGS facilities or equivalent" or 2
  ngs_clean[ , ngs_capacity_column] =? 0 ~ 0,
  ngs_clean[ , ngs_capacity_column] == "0 - 0 NGS facilities" ~ 0,
  ngs_clean[ , ngs_capacity_column] == 1 ~ 1,
  ngs_clean[ , ngs_capacity_column] == "1 - 1-3 NGS facilities or equivalent" ~ 1,
  ngs_clean[ , ngs_capacity_column] == 2 ~ 2,
  ngs_?lean[ , ngs_capacity_column] == "2 - >3 NGS facilities or equivalent" ~ 2
)

# select only code and who_testing_capacity variables
ngs_clean <- ngs_clean %>%
  select(contains("code"), ends_with("ngs_capacity"))

# find_clean: merge WHO testing data into t?mplate
find_clean <- left_join(find_clean, ngs_clean, by = c("code" = "country_code"))

## Sequencing Capacity Classifier variable

# create Sequencing Capacity Classifier variable
# Variable indicating evidence of Sequencing Capacity
# Variable is based o? WHO slides on facilities, GISRS data for extraction of capacity & testing data
# Variable is based on confidential manufacturer data on install bases
find_clean <- find_clean %>%
  # create new variable for Sequencing Capacity based on:
  # WHO slides, GI?RS data
  # confidential manufacturer data on install bases
  mutate(
    # "0 NGS facilities or equivalent": 0 ngs_capacity
    # "1-3 NGS facilities or equivalent": 1 ngs_capacity
    # "4+ NGS facilities or equivalent": 2 ngs_capacity
    sequencing_cap?city = case_when(
      ngs_capacity == 0 ~ "0 NGS facilities or equivalent",
      ngs_capacity == 1 ~ "1-3 NGS facilities or equivalent",
      ngs_capacity == 2 ~ "4+ NGS facilities or equivalent",
      is.na(ngs_capacity) == T ~ "0 NGS facilities or e?uivalent"
    )
  )



###############################################################
###########    RAW GISAID META-DATA FILES    ##################
###############################################################

# import csv from GISAID (www.epicov.org?
#takes a while to import data; be patient

gisaid_metadata_raw <- read.csv("C:\\Users\\bthrift\\Documents\\Projects\\FIND Map\\metadata.tsv",
                                sep = '\t',
                                na.strings = c("", "?")) %>%
  # stan?ardize names with this janitor function
  clean_names()

# remove non human samples
gisaid_metadata_raw <- gisaid_metadata_raw %>%
  filter(host == "Human")

# separate location into continent, country, division, and location
gisaid_metadata_raw <- gisaid_?etadata_raw %>%
  separate(location,
           into = c("continent", "country", "division", "location"),
           sep = " / | /|/ |/")

# select accession_id, collection_date, continent, country, division, location, pango_lineage, variant, submission_da?e column
gisaid_metadata_raw <- gisaid_metadata_raw %>%
  select(accession_id, collection_date, continent, country, division, location, pango_lineage, variant, submission_date)

# replace USA acronym with United States
gisaid_metadata_raw$country[gisaid_me?adata_raw$country == "USA"] <- "United States"

# replace Usa acronym with United States
gisaid_metadata_raw$country[gisaid_metadata_raw$country == "Usa"] <- "United States"

# replace DC with District of Columbia
gisaid_metadata_raw$division[gisaid_metada?a_raw$division == "DC"] <- "District of Columbia"

#Capitalize function no longer available;
# Loading Library
library(stringr)

# capitalize first letter of country
gisaid_metadata_raw$country <- str_to_title(gisaid_metadata_raw$country)

# correct mispel?ing
gisaid_metadata_raw$country[gisaid_metadata_raw$country == "Cote dIvoire"] <- "Cote d'Ivoire"

# correct mispelling
gisaid_metadata_raw$country[gisaid_metadata_raw$country == "Niogeria"] <- "Nigeria"

# correct mispelling
gisaid_metadata_raw$country[gi?aid_metadata_raw$country == "Republic of the Congo"] <- "Congo"

# correct mispelling
gisaid_metadata_raw$country[gisaid_metadata_raw$country == "Czech republic"] <- "Czech Republic"

# correct misentry of Lithuania
gisaid_metadata_raw$country[gisaid_metad?ta_raw$country == "Jonavos apskritis"] <- "Lithuania"

# correct misreading
gisaid_metadata_raw$country[gisaid_metadata_raw$country == "México"] <- "Mexico"

# assign dates missing a day to 15 of the month
gisaid_metadata_raw$collection_date <- ifelse(ncha?(as.character(gisaid_metadata_raw$collection_date)) == 7, paste(as.character(gisaid_metadata_raw$collection_date), "15", sep = "-"), as.character(gisaid_metadata_raw$collection_date))

# parse collection dates as dates
# any observations with only year bec?me NA
gisaid_metadata_raw$collection_date <- as.Date(as.character(gisaid_metadata_raw$collection_date), format = "%Y-%m-%d")

# parse submission dates as dates
gisaid_metadata_raw$submission_date <- as.Date(as.character(gisaid_metadata_raw$submission_date)? format = "%Y-%m-%d")

# exclude submissions earlier than 2019-12-01
gisaid_metadata_raw <- gisaid_metadata_raw[gisaid_metadata_raw$collection_date >= as.Date("2019-12-01", format = "%Y-%m-%d"),]

# exclude submissions dated to the future
gisaid_metadata_r?w <- gisaid_metadata_raw[gisaid_metadata_raw$collection_date <= as.Date(Sys.Date(), format = "%Y-%m-%d"),]

# generate country codes from GISAID country names
gisaid_metadata_raw$code <- countrycode(gisaid_metadata_raw$country, origin = 'country.name', des?ination = 'iso3c')

# dataframe for total sequences in GISAID
gisaid_metadata_clean <- gisaid_metadata_raw %>%
  group_by(code) %>%
  mutate(total_sequences = n()
  ) %>%
  select(code, total_sequences)

# display one row per country
gisaid_metadata_clean ?- gisaid_metadata_clean[!duplicated(gisaid_metadata_clean$code),]

# find_clean: merge GISAID metadata into template
find_clean <- left_join(find_clean, gisaid_metadata_clean, by = c("code" = "code"))

# replace NA with 0 for total_sequences
find_clean$tot?l_sequences <- ifelse(is.na(find_clean$total_sequences) == T, 0, find_clean$total_sequences)



###############################################################
###########    GISAID PROVISION DATA FILE    ##################
################################?##############################

# import csv from GISAID provision (curl https://najapoland:ofEJOnWEOfj3@www.epicov.org/epi3/3p/finddx/export/provision.json.xz | xz -d -T0 > ./provision.json)
gisaid_provision <- read.csv("C:\\Users\\bthrift\\Documents\\Pro?ects\\FIND Map\\provision.csv",
                             na.strings = c("", "?")) %>%
  # standardize names with this janitor function
  clean_names()

# parse dates as dates
gisaid_provision$created <- as.Date(as.character(gisaid_provision$created), f?rmat = "%Y-%m-%d")

# generate country codes from GISAID country names
gisaid_provision$code <- countrycode(gisaid_provision$country, origin = 'country.name', destination = 'iso3c')

#insert missing countries country codes:

# insert country code for Saint?Martin
gisaid_provision$code[gisaid_provision$country=="Saint Martin"] <- "MAF"

# insert country code for Guyana
gisaid_provision$code[gisaid_provision$country=="Guyane"] <- "GUY"

# insert country code for Kosovo
gisaid_provision$code[gisaid_provision$co?ntry=="Kosovo"] <- "XKX"

# insert country code for Kosovo
gisaid_provision$code[gisaid_provision$country=="Bonaire"] <- "BQ"

# insert country code for Kosovo
gisaid_provision$code[gisaid_provision$country=="Canary Islands"] <- "IC"

# insert country code?for Kosovo
gisaid_provision$code[gisaid_provision$country=="Crimea"] <- "UA"

# insert country code for Kosovo
gisaid_provision$code[gisaid_provision$country=="England"] <- "UK"

# insert country code for Kosovo
gisaid_provision$code[gisaid_provision$count?y=="Sint Eustatius"] <- "BQ"



# select columns
gisaid_provision <- gisaid_provision %>%
  select(submission_count, code)

# find_clean: merge GISAID metadata into template
find_clean <- left_join(find_clean, gisaid_provision, by = c("code" = "code"))

# ?eplace NA with 0 for submission_count
find_clean$submission_count <- ifelse(is.na(find_clean$submission_count) == T, 0, find_clean$submission_count)

# # dataframe for median reporting lag for each country after 2021-01-01
# gisaid_metadata_clean <- gisaid?metadata_raw %>%
#    filter(collection_date >= as.Date("2021-01-01", format = "%Y-%m-%d")) %>%
#    group_by(code) %>%
#    mutate(median_reporting_lag = median(as.numeric(submission_date - collection_date,
#                                               ?            unit = "days"), na.rm = T),
#                                         total_sequences = n()
#    ) %>%
#    select(code, median_reporting_lag, total_sequences)
#  
# # display one row per country
# gisaid_metadata_clean <- gisaid_metadata_clean?!duplicated(gisaid_metadata_clean$code),]
#  
# # remove unnecessary columns and rows
# global_month_lag <- global_month_lag %>%
#    select(code, median_reporting_lag)
#  
# # save diff_mean_reporting_lag column name for later
# sequencing_reporting_lag_n?me <- colnames(global_month_lag)[2]

# define month to month comparison points for reporting lag
month_1_start <- as.Date("2020-01-01", format = "%Y-%m-%d")
month_1_end <- as.Date("2020-12-31", format = "%Y-%m-%d")
month_2_start <- as.Date("2021-01-01", fo?mat = "%Y-%m-%d")
month_2_end <- as.Date("2021-12-31", format = "%Y-%m-%d")

# dataframe for first month of interest reporting lag
global_month_1_lag <- gisaid_metadata_raw %>%
  filter(collection_date >= as.Date(month_1_start) &
           collection_date?<= as.Date(month_1_end)) %>%
  group_by(code) %>%
  mutate(median_reporting_lag_month_1 = median(as.numeric(submission_date - collection_date,
                                                          unit = "days"), na.rm = T)
  ) %>%
  select(code, media?_reporting_lag_month_1)

# display one row per country
global_month_1_lag <- global_month_1_lag[!duplicated(global_month_1_lag$code),]

# create dataframe for second month of interest reporting lag
global_month_2_lag <- gisaid_metadata_raw %>%
  filter(col?ection_date >= as.Date(month_2_start) &
           collection_date <= as.Date(month_2_end)) %>%
  group_by(code) %>%
  mutate(median_reporting_lag_month_2 = median(as.numeric(submission_date - collection_date,
                                              ?           unit = "days"), na.rm = T)
  ) %>%
  select(code, median_reporting_lag_month_2)

# display one row for each country
global_month_2_lag <- global_month_2_lag[!duplicated(global_month_2_lag$code),]

# join first and second month of interest data f?ames
global_month_lag <- full_join(global_month_2_lag, global_month_1_lag, by = "code")

# create reporting lag month to month difference column
global_month_lag$reporting_lag_diff <- as.numeric(global_month_lag$median_reporting_lag_month_2 - global_month_?ag$median_reporting_lag_month_1)

# remove unnecessary columns and rows
global_month_lag <- global_month_lag %>%
  select(code, reporting_lag_diff)

# find_clean: merge GISAID metadata into template
# find_clean <- left_join(find_clean, global_month_lag, b? = c("code" = "code"))


## SARS-CoV-2 Sequencing Reporting Lag variable

# create SARS-CoV-2 Sequencing Reporting Lag variable
# Variable indicating the status of reporting lag for each country with submissions in GISAID
# find_clean <- find_clean %>%
#  ?# create new variable for SARS-CoV-2 Sequencing Reporting Lag based on:
#   # diff_mean_reporting_lag variable derived from GISAID metadata
#   mutate(
#     # "Steady or Decreasing": <= 0 diff_mean_reporting_lag
#     # "Increasing": >0 diff_mean_reportin?_lag
#     # "Insufficient Reporting": NA diff_mean_reporting_lag
#     sequencing_reporting_lag = case_when(
#       is.na(reporting_lag_diff) == T ~ "Insufficient Reporting",
#       reporting_lag_diff <= 0 ~ "Steady or Decreasing",
#       reporting_lag?diff > 0 ~ "Increasing"
#     )
#   )








###############################################################
###########    PROCESSED GISAID DATA, PTC    ##################
###############################################################



## GISAID data
?# Previously imported csv from CTP (https://github.com/covid-tracking-collab/gisaid-variants/tree/main/data)
# Now, importing csv from RF Github (https://github.com/rockfound/gisaid-variants/tree/main/data)

#Starting with older file to test scripts output?correct data for 10/2021 maps

# import csv from CTP (https://github.com/covid-tracking-collab/gisaid-variants/tree/main/data)
#file_names <- file.info(list.files("https://raw.githubusercontent.com/rockfound/gisaid-variants/main/data/gisaid_owid_country_li?eage_cases_2021_10_14_weekly.csv?token=AV5I3JYZ4PTLRPPMWIJGPELBPLWUK", full.names = T))
gisaid_raw <- read.csv("https://raw.githubusercontent.com/rockfound/gisaid-variants/main/data/gisaid_owid_country_lineage_cases_2021_08_19_weekly.csv?token=AV5I3JYZ4PTL?PPMWIJGPELBPLWUK")
  # standardize names with this janitor function
  clean_names(gisaid_raw)


# generate country codes from GISAID country names
gisaid_raw$country_code <- countrycode(gisaid_raw$gisaid_country, origin = 'country.name', destination = 'iso?c')

# generate country codes from OWID country names
gisaid_raw$country_code_owid <- countrycode(gisaid_raw$owid_location, origin = 'country.name', destination = 'iso3c')

# inserts missing country codes
gisaid_raw$country_code[gisaid_raw$country == "Micr?nesia (country)"] <- "FSM"
gisaid_raw$country_code[gisaid_raw$country == "Timor"] <- "TLS"
gisaid_raw$country_code[gisaid_raw$country == "Turks and Caicos Islands"] <- "TCA"
gisaid_raw$country_code[gisaid_raw$country == "Nauru"] <- "NRU"
gisaid_raw$country?code[gisaid_raw$country == "Kosovo"] <- "XKX"
gisaid_raw$country_code[gisaid_raw$country == "Guernsey"] <- "GGY"
gisaid_raw$country_code[gisaid_raw$country == "Falkland Islands"] <- "FLK"

# parse collection dates as dates
#***** collect_date is not a vari?ble in dataset, change to "gisaid_collect_weekstartdate"
# any observations with only year or year-month become NA
gisaid_raw$gisaid_collect_weekstartdate <- as.Date(as.character(gisaid_raw$gisaid_collect_weekstartdate), format = "%Y-%m-%d")

# parse submi?sion dates as dates
#******* owid_date is not a variable in this dataset
#gisaid_raw$owid_date <- as.Date(as.character(gisaid_raw$owid_date), format = "%Y-%m-%d")

# create mergeable find_raw
#object "code" not found...
find_raw <- find_clean %>%
  select(?ode, total_sequences)












# merge gisaid_raw and find_raw
gisaid_raw <- left_join(gisaid_raw, find_raw, by = c("country_code" = "code"))

colnames(gisaid_raw)


# total_viable_sequences: cumulative sequences in GISAID per country
#*** edit: no colu?n "all_lineages", so edit to make it "all.lineages"
gisaid_clean <- gisaid_raw %>%
  group_by(country_code) %>%
  mutate(
    total_viable_sequences = sum(All.lineages, na.rm = T),
    all_cases = sum(owid_new_cases, na.rm = T),
    percent_cases_sequenced?= round(100*(total_sequences/all_cases),2),
    sequences_per_capita_per_100k = round((total_sequences/(owid_population/100000)),2)
  )

# percent_cases_sequenced: cumulative sequences in GISAID per country collected since 2021-01-01/cumulative cases in OW?D per country since 2021-01-01
# gisaid_clean <- gisaid_clean %>%
#   filter(owid_date >= as.Date("2021-01-01", format = "%Y-%m-%d")) %>%
#   group_by(country_code) %>%
#   mutate(
#     viable_sequences_2021 = sum(all_lineages, na.rm = T),
#     all_cases?2021 = sum(owid_new_cases, na.rm = T),
#     percent_cases_sequenced = round(100*(viable_sequences_2021/all_cases_2021),2),
#     sequences_per_capita_per_100k = round((viable_sequences_2021/(owid_population/100000)),2)
#   )

# replace percent_cases_seque?ced > 100 or NaN with NA
gisaid_clean$percent_cases_sequenced[gisaid_clean$percent_cases_sequenced > 100 | gisaid_clean$percent_cases_sequenced == "NaN"] <- NA

# display one row for each country
gisaid_clean <- gisaid_clean[!duplicated(gisaid_clean$countr?_code),]

# remove unnecessary columns and rows
gisaid_clean <- gisaid_clean %>%
  select(country_code, total_viable_sequences, all_cases, percent_cases_sequenced, sequences_per_capita_per_100k)

# sort alphabetically by country name
gisaid_clean <- gisaid?clean[order(gisaid_clean$country_code),]

# find_clean: merge WHO testing data into template
find_clean <- left_join(find_clean, gisaid_clean, by = c("code" = "country_code"))



#############################################################################?
###########   COUNTRY SEQUENCING CATEGORY, BASED ON FREQUENCY    ##########
##############################################################################

## SARS-CoV-2 Sequencing Classifier variable

# create SARS-CoV-2 Sequencing Classifier variable
# ?ariable indicating how many submissions from each country appear in GISAID
find_clean <- find_clean %>%
  # create new variable for SARS-CoV-2 Sequencing based on:
  # submission_count variable derived from GISAID provision
  mutate(
    # "0 sequences": 0?submission_count | NA submission_count
    # "1-499 sequences": <500 submission_count
    # "500+ sequences": >= 500 submission_count
    sars_cov_2_sequencing = case_when(
      submission_count >= 500 ~ "500+ sequences",
      submission_count < 500 & su?mission_count > 0 ~ "1-499 sequences",
      submission_count == 0 ~ "0 sequences",
      is.na(submission_count) == T ~ "0 sequences"
    )
  )




##############################################################################
###########   WHO DATA FILES?   ##########
##############################################################################



## WHO Case data (https://covid19.who.int/table)

# import csv from WHO (https://rockfound.box.com/s/qd08kckyuig42rytzncso22if726uajq)
who_case_raw <- read.csv(?C:\\Users\\bthrift\\Documents\\Projects\\FIND Map\\WHO_COVID-19_global_table_data.csv") %>%
  # standardize names with this janitor function
  clean_names()

# remove first row Global count
who_case_raw <- who_case_raw[2:nrow(who_case_raw),]

# turn row na?es into country column
who_case_raw <- tibble::rownames_to_column(who_case_raw)

# add country code to WHO case data
who_case_raw$country_code <- countrycode(who_case_raw$rowname, origin = 'country.name', destination = 'iso3c')

# inserts missing country c?des
who_case_raw$country_code[who_case_raw$rowname == "Kosovo[1]"] <- "XKX"
who_case_raw$country_code[who_case_raw$rowname == "Saint Martin"] <- "MAF"

# select country code and cases_newly_reported_in_last_7_days_per_100000_population
who_case_clean <- wh?_case_raw %>%
  select(code = country_code, cases_newly_reported_in_last_7_days_per_100000_population = cases_newly_reported_in_last_7_days)

# find_clean: merge WHO case data into template
find_clean <- left_join(find_clean, who_case_clean, by = "code")

?
#################################################
###########   WORLD BANK DATA FILES    ##########
#################################################



## World Bank background data (https://datahelpdesk.worldbank.org/knowledgebase/articles/906519-world-?ank-country-and-lending-groups) (https://covid19.who.int/table)

# import xls from FIND sources (https://rockfound.box.com/s/3kj4wkmkgpktmb6z03r49nyta6lb64i5)
world_bank_background_raw <- read_excel("C:\\Users\\bthrift\\Documents\\Projects\\FIND Map\\CLASS?xls",
                                        sheet = "List of economies",
                                        skip = 5) %>%
  # standardize names with this janitor function
  clean_names()

# remove buffer rows by iso code and select code and testing ?apacity columns
world_bank_background_clean <- world_bank_background_raw %>%
  # drop all columns except iso code and world_bank_economies
  select(4,7)

# rename columns code and world_bank_economies
colnames(world_bank_background_clean) <- c("code", "wor?d_bank_economies")

# find_clean: merge WHO testing data into template
find_clean <- left_join(find_clean, world_bank_background_clean, by = c("code" = "code"))



########################################################################################
###?#######   COUNTRY INTERVENTION CLASSIFIER, BASED ON SEQUENCING METRICS    ##########
########################################################################################


## Archetype Classifier

# create Archetype Classifier variable
# Variable indic?ting archetype each country belongs
# Variable is based on Dx Testing Capacity Classifier, NGS Capacity Classifier, and SARS-CoV-2 Sequencing Classifier
# create new variable for archetype based on:
# Dx Testing Capacity Classifier (dx_testing_capacity)
# ?GS Capacity Classifier (ngs_capacity)
# SARS-CoV-2 Sequencing Classifier (sars_cov_2_sequencing)
# WHO background data (world_bank_economies)
# "0 - High Income *": world_bank_economies "High Income" + code CHN, RUS
# "4 - Strengthen"
# "3 - Leverage"
# "2?- Connect"
# "1 - Test"
find_clean <- find_clean %>%
  mutate(
    archetype_full = case_when(
      ((world_bank_economies == "High income") ~ "0 - High Income*"),
      ((code == "CHN") ~ "0 - High Income*"),
      ((code == "RUS") ~ "0 - High Income*"),?      (sequencing_capacity == "4+ NGS facilities or equivalent" & sars_cov_2_sequencing == "500+ sequences" & dx_testing_capacity == "Reliable testing capacity") ~ "4 - Strengthen",
      (sequencing_capacity == "4+ NGS facilities or equivalent" & sars_cov?2_sequencing == "500+ sequences" & dx_testing_capacity == "Unreliable testing capacity") ~ "1 - Test",
      (sequencing_capacity == "4+ NGS facilities or equivalent" & sars_cov_2_sequencing == "1-499 sequences" & dx_testing_capacity == "Reliable testing c?pacity") ~ "3 - Leverage",
      (sequencing_capacity == "4+ NGS facilities or equivalent" & sars_cov_2_sequencing == "1-499 sequences" & dx_testing_capacity == "Unreliable testing capacity") ~ "1 - Test",
      (sequencing_capacity == "4+ NGS facilities o? equivalent" & sars_cov_2_sequencing == "0 sequences" & dx_testing_capacity == "Reliable testing capacity") ~ "2 - Connect",
      (sequencing_capacity == "4+ NGS facilities or equivalent" & sars_cov_2_sequencing == "0 sequences" & dx_testing_capacity == "?nreliable testing capacity") ~ "1 - Test",
      (sequencing_capacity == "1-3 NGS facilities or equivalent" & sars_cov_2_sequencing == "500+ sequences" & dx_testing_capacity == "Reliable testing capacity") ~ "4 - Strengthen",
      (sequencing_capacity == ?1-3 NGS facilities or equivalent" & sars_cov_2_sequencing == "500+ sequences" & dx_testing_capacity == "Unreliable testing capacity") ~ "1 - Test",
      (sequencing_capacity == "1-3 NGS facilities or equivalent" & sars_cov_2_sequencing == "1-499 sequences? & dx_testing_capacity == "Reliable testing capacity") ~ "3 - Leverage",
      (sequencing_capacity == "1-3 NGS facilities or equivalent" & sars_cov_2_sequencing == "1-499 sequences" & dx_testing_capacity == "Unreliable testing capacity") ~ "1 - Test",
   ?  (sequencing_capacity == "1-3 NGS facilities or equivalent" & sars_cov_2_sequencing == "0 sequences" & dx_testing_capacity == "Reliable testing capacity") ~ "2 - Connect",
      (sequencing_capacity == "1-3 NGS facilities or equivalent" & sars_cov_2_seque?cing == "0 sequences" & dx_testing_capacity == "Unreliable testing capacity") ~ "1 - Test",
      (sequencing_capacity == "0 NGS facilities or equivalent" & sars_cov_2_sequencing == "500+ sequences" & dx_testing_capacity == "Reliable testing capacity") ~ "? - Leverage",
      (sequencing_capacity == "0 NGS facilities or equivalent" & sars_cov_2_sequencing == "500+ sequences" & dx_testing_capacity == "Unreliable testing capacity") ~ "1 - Test",
      (sequencing_capacity == "0 NGS facilities or equivalent" & ?ars_cov_2_sequencing == "1-499 sequences" & dx_testing_capacity == "Reliable testing capacity") ~ "2 - Connect",
      (sequencing_capacity == "0 NGS facilities or equivalent" & sars_cov_2_sequencing == "1-499 sequences" & dx_testing_capacity == "Unreliabl? testing capacity") ~ "1 - Test",
      (sequencing_capacity == "0 NGS facilities or equivalent" & sars_cov_2_sequencing == "0 sequences" & dx_testing_capacity == "Reliable testing capacity") ~ "2 - Connect",
      (sequencing_capacity == "0 NGS facilities?or equivalent" & sars_cov_2_sequencing == "0 sequences" & dx_testing_capacity == "Unreliable testing capacity") ~ "1 - Test",
      (dx_testing_capacity == "Unreliable testing capacity") ~ "1 - Test"
    )
  )

# clean archetype column
find_clean <- find_c?ean %>%
  mutate(
    archetype = case_when(
      archetype_full == "0 - High Income*" ~ "High Income*",
      archetype_full == "4 - Strengthen" ~ "Strengthen",
      archetype_full == "3 - Leverage" ~ "Leverage",
      archetype_full == "2 - Connect" ~ ?Connect",
      archetype_full == "1 - Test" ~ "Test"
    )
  )

# label column
find_clean <- find_clean %>%
  mutate(
    label = case_when(
      archetype == "High Income*" ~ "",
      archetype == "Strengthen" ~ "- Build additional NGS capacity for sca?e-up",
      archetype == "Leverage" ~ "- Leverage existing NGS capacity",
      archetype == "Connect" ~ "- Set-up sample referral networks or build NGS capacity from scratch",
      archetype == "Test" ~ "- Increase diagnostic testing capacity"
    )
  )?





#################################################
###########   DIAGNOSIS CLASSIFER    ##########
#################################################



# create Dx Testing Capacity Classifier clean variable
# Variable indicating highest level of diagn?stic throughput (Low testing capacity, Medium testing capacity, High testing capacity)
# Variable is based on FIND testing dashboard
# If FIND source missing for that country, take source OWD
find_clean <- find_clean %>%
  # create new variable for Dx test?ng capacity based on:
  # FIND testing capacity
  # OWID testing Capacity
  mutate(
    # "0-49.99": < 50 max_new_tests_cap_avg in FIND
    # "50-99.99": >= 10 & < 100 max_new_tests_cap_avg in FIND
    # "100+": >= 100 max_new_tests_cap_avg in FIND
    # "?-49.99": NA in FIND
    # "High Income*": world_bank_economies == "High income"
    dx_testing_capacity_clean = case_when(
      world_bank_economies == "High income" ~ "High Income*",
      code == "CHN" ~ "High Income*",
      code == "RUS" ~ "High Incom?*",
      max_new_tests_cap_avg >= 50 & who_testing_capacity == 1 ~ "Reliable testing capacity",
      max_new_tests_cap_avg >= 50 & who_testing_capacity == 0 ~ "Reliable testing capacity",
      max_new_tests_cap_avg >= 50 & is.na(who_testing_capacity) ==?T ~ "Reliable testing capacity",
      max_new_tests_cap_avg < 50 & who_testing_capacity == 1 ~ "Reliable testing capacity",
      max_new_tests_cap_avg < 50 & who_testing_capacity == 0 ~ "Unreliable testing capacity",
      max_new_tests_cap_avg < 50 & is?na(who_testing_capacity) == T ~ "Unreliable testing capacity",
      is.na(max_new_tests_cap_avg) == T & who_testing_capacity == 1 ~ "Reliable testing capacity",
      is.na(max_new_tests_cap_avg) == T & who_testing_capacity == 0 ~ "Unreliable testing capa?ity",
      is.na(max_new_tests_cap_avg) == T & is.na(who_testing_capacity) == T ~ "Unreliable testing capacity"
    )
  )





#################################################
###########   SEQUENCING CLASSIFIER    ##########
############################?####################



# create Sequencing Capacity Classifier clean variable
# Variable indicating evidence of Sequencing Capacity
# Variable is based on WHO slides on facilities, GISRS data for extraction of capacity & testing data
# Variable is based o? confidential manufacturer data on install bases
find_clean <- find_clean %>%
  # create new variable for Sequencing Capacity based on:
  # WHO slides, GISRS data
  # confidential manufacturer data on install bases
  mutate(
    # "0 NGS facilities or equi?alent": 0 ngs_capacity
    # "1-3 NGS facilities or equivalent": 1 ngs_capacity
    # "4+ NGS facilities or equivalent": 2 ngs_capacity
    sequencing_capacity_clean = case_when(
      world_bank_economies == "High income" ~ "High Income*",
      code == "?HN" ~ "High Income*",
      code == "RUS" ~ "High Income*",
      ngs_capacity == 0 ~ "0 NGS facilities or equivalent",
      ngs_capacity == 1 ~ "1-3 NGS facilities or equivalent",
      ngs_capacity == 2 ~ "4+ NGS facilities or equivalent",
      is.na(n?s_capacity) == T ~ "0 NGS facilities or equivalent"
    )
  )

# create SARS-CoV-2 Sequencing Classifier clean variable
# Variable indicating how many submissions from each country appear in GISAID
find_clean <- find_clean %>%
  # create new variable for S?RS-CoV-2 Sequencing based on:
  # submission_count variable derived from GISAID provision
  mutate(
    # "0 sequences": 0 submission_count | NA submission_count
    # "1-499 sequences": <500 submission_count
    # "500+ sequences": >= 500 submission_count?    sars_cov_2_sequencing_clean = case_when(
      world_bank_economies == "High income" ~ "High Income*",
      code == "CHN" ~ "High Income*",
      code == "RUS" ~ "High Income*",
      submission_count >= 500 ~ "500+ sequences",
      submission_count ? 500 & submission_count > 0 ~ "1-499 sequences",
      submission_count == 0 ~ "0 sequences",
      is.na(submission_count) == T ~ "0 sequences"
    )
  )




##############################################################################
###########   INTE?VENTION CLASSIFIER, W/O HIGH INCOME COUNTRIES    ##########
##############################################################################

## Clean Archetype Classifier (without HIC archetype)

# create Archetype Classifier variable
# Variable indicating ?rchetype each country belongs
# Variable is based on Dx Testing Capacity Classifier, NGS Capacity Classifier, and SARS-CoV-2 Sequencing Classifier
# create new variable for archetype based on:
# Dx Testing Capacity Classifier (dx_testing_capacity)
# NGS Ca?acity Classifier (ngs_capacity)
# SARS-CoV-2 Sequencing Classifier (sars_cov_2_sequencing)
# "4 - Strengthen"
# "3 - Leverage"
# "2 - Connect"
# "1 - Test"
find_clean <- find_clean %>%
  mutate(
    archetype_clean = case_when(
      (sequencing_capacity =? "4+ NGS facilities or equivalent" & sars_cov_2_sequencing == "500+ sequences" & dx_testing_capacity == "Reliable testing capacity") ~ "Strengthen",
      (sequencing_capacity == "4+ NGS facilities or equivalent" & sars_cov_2_sequencing == "500+ sequences"?& dx_testing_capacity == "Unreliable testing capacity") ~ "Test",
      (sequencing_capacity == "4+ NGS facilities or equivalent" & sars_cov_2_sequencing == "1-499 sequences" & dx_testing_capacity == "Reliable testing capacity") ~ "Leverage",
      (sequen?ing_capacity == "4+ NGS facilities or equivalent" & sars_cov_2_sequencing == "1-499 sequences" & dx_testing_capacity == "Unreliable testing capacity") ~ "Test",
      (sequencing_capacity == "4+ NGS facilities or equivalent" & sars_cov_2_sequencing == "0 s?quences" & dx_testing_capacity == "Reliable testing capacity") ~ "Connect",
      (sequencing_capacity == "4+ NGS facilities or equivalent" & sars_cov_2_sequencing == "0 sequences" & dx_testing_capacity == "Unreliable testing capacity") ~ "Test",
      (se?uencing_capacity == "1-3 NGS facilities or equivalent" & sars_cov_2_sequencing == "500+ sequences" & dx_testing_capacity == "Reliable testing capacity") ~ "Strengthen",
      (sequencing_capacity == "1-3 NGS facilities or equivalent" & sars_cov_2_sequencin? == "500+ sequences" & dx_testing_capacity == "Unreliable testing capacity") ~ "Test",
      (sequencing_capacity == "1-3 NGS facilities or equivalent" & sars_cov_2_sequencing == "1-499 sequences" & dx_testing_capacity == "Reliable testing capacity") ~ "Le?erage",
      (sequencing_capacity == "1-3 NGS facilities or equivalent" & sars_cov_2_sequencing == "1-499 sequences" & dx_testing_capacity == "Unreliable testing capacity") ~ "Test",
      (sequencing_capacity == "1-3 NGS facilities or equivalent" & sars_?ov_2_sequencing == "0 sequences" & dx_testing_capacity == "Reliable testing capacity") ~ "Connect",
      (sequencing_capacity == "1-3 NGS facilities or equivalent" & sars_cov_2_sequencing == "0 sequences" & dx_testing_capacity == "Unreliable testing capac?ty") ~ "Test",
      (sequencing_capacity == "0 NGS facilities or equivalent" & sars_cov_2_sequencing == "500+ sequences" & dx_testing_capacity == "Reliable testing capacity") ~ "Leverage",
      (sequencing_capacity == "0 NGS facilities or equivalent" & s?rs_cov_2_sequencing == "500+ sequences" & dx_testing_capacity == "Unreliable testing capacity") ~ "Test",
      (sequencing_capacity == "0 NGS facilities or equivalent" & sars_cov_2_sequencing == "1-499 sequences" & dx_testing_capacity == "Reliable testing?capacity") ~ "Connect",
      (sequencing_capacity == "0 NGS facilities or equivalent" & sars_cov_2_sequencing == "1-499 sequences" & dx_testing_capacity == "Unreliable testing capacity") ~ "Test",
      (sequencing_capacity == "0 NGS facilities or equival?nt" & sars_cov_2_sequencing == "0 sequences" & dx_testing_capacity == "Reliable testing capacity") ~ "Connect",
      (sequencing_capacity == "0 NGS facilities or equivalent" & sars_cov_2_sequencing == "0 sequences" & dx_testing_capacity == "Unreliable tes?ing capacity") ~ "Test",
      (dx_testing_capacity == "Unreliable testing capacity") ~ "Test"
    )
  )

# rename name column as country column
colnames(find_clean)[1] <- "country"

# alphabetize find_clean by country
find_clean <- find_clean[order(find_c?ean$country),]

# add geometry variable as first column
find_clean <- cbind(geometry=NA, find_clean)

# export find_clean to csv
write.csv(find_clean, "C:\\Users\\bthrift\\Documents\\Projects\\FIND Map\\find_map_10.22.csv", na = "NaN", row.names = FALSE)

? add padding to who_testing_capacity
find_clean <- find_clean %>%
  mutate(
    who_testing_capacity = case_when(
      who_testing_capacity == 1 ~ "1 - Reliable",
      who_testing_capacity == 0 ~ "0 - Unreliable"
    )
  )

# add padding to sequencing_ca?acity
find_clean <- find_clean %>%
  mutate(
    sequencing_capacity = case_when(
      sequencing_capacity == "4+ NGS facilities or equivalent" ~ "2 - 4+ NGS facilities or equivalent",
      sequencing_capacity == "1-3 NGS facilities or equivalent" ~ "1 -?1-3 NGS facilities or equivalent",
      sequencing_capacity == "0 NGS facilities or equivalent" ~ "0 - 0 NGS facilities or equivalent"
    )
  )



##############################################################################
###########   EXPORT DATA FI?ES TO CSV, TO IMPORT CSV IN FLOURISH   ##########
##############################################################################



# export find_clean Global to csv
write.csv(find_clean %>%
            select(country, region, who_testing_capacity, max_new?tests_cap_avg, sequencing_capacity, submission_count, cases_newly_reported_in_last_7_days_per_100000_population, archetype_full) %>%
            rename(., "Country" = country, "Region" = region, 'WHO testing Capacity' = who_testing_capacity, 'Max 30-day av?rage of new tests per capita' = max_new_tests_cap_avg, 'Sequencing capacity' = sequencing_capacity, 'Cumulative GISAID sequences' = submission_count, 'New cases per capita in the last 7 days per 100k' = cases_newly_reported_in_last_7_days_per_100000_popula?ion, "Archetype" = archetype_full),
          "C:\\Users\\bthrift\\Documents\\Projects\\FIND Map\\output_data\\GLOBAL_find_map_10.22.csv", na = "NaN", row.names = FALSE)

# export find_clean Africa to csv
write.csv(find_clean %>%
            filter(region ?= "Africa") %>%
            select(country, region, who_testing_capacity, max_new_tests_cap_avg, sequencing_capacity, submission_count, cases_newly_reported_in_last_7_days_per_100000_population, archetype_full) %>%
            rename(., "Country" = country? "Region" = region, 'WHO testing Capacity' = who_testing_capacity, 'Max 30-day average of new tests per capita' = max_new_tests_cap_avg, 'Sequencing capacity' = sequencing_capacity, 'Cumulative GISAID sequences' = submission_count, 'New cases per capita in?the last 7 days per 100k' = cases_newly_reported_in_last_7_days_per_100000_population, "Archetype" = archetype_full),
          "C:\\Users\\bthrift\\Documents\\Projects\\FIND Map\\output_data\\AfricaL_find_map_10.22.csv", na = "NaN", row.names = FALSE)

# ?xport find_clean Americas to csv
write.csv(find_clean %>%
            filter(region == "Americas") %>%
            select(country, region, who_testing_capacity, max_new_tests_cap_avg, sequencing_capacity, submission_count, cases_newly_reported_in_last_7_da?s_per_100000_population, archetype_full) %>%
            rename(., "Country" = country, "Region" = region, 'WHO testing Capacity' = who_testing_capacity, 'Max 30-day average of new tests per capita' = max_new_tests_cap_avg, 'Sequencing capacity' = sequenci?g_capacity, 'Cumulative GISAID sequences' = submission_count, 'New cases per capita in the last 7 days per 100k' = cases_newly_reported_in_last_7_days_per_100000_population, "Archetype" = archetype_full),
          "C:\\Users\\bthrift\\Documents\\Projects\?FIND Map\\output_data\\Americas_find_map_10.22.csv", na = "NaN", row.names = FALSE)

# export find_clean Eastern Mediterranean to csv
write.csv(find_clean %>%
            filter(region == "Eastern Mediterranean") %>%
            select(country, region, who?testing_capacity, max_new_tests_cap_avg, sequencing_capacity, submission_count, cases_newly_reported_in_last_7_days_per_100000_population, archetype_full) %>%
            rename(., "Country" = country, "Region" = region, 'WHO testing Capacity' = who_testin?_capacity, 'Max 30-day average of new tests per capita' = max_new_tests_cap_avg, 'Sequencing capacity' = sequencing_capacity, 'Cumulative GISAID sequences' = submission_count, 'New cases per capita in the last 7 days per 100k' = cases_newly_reported_in_las?_7_days_per_100000_population, "Archetype" = archetype_full),
          "C:\\Users\\bthrift\\Documents\\Projects\\FIND Map\\output_data\\EastMediterran_find_map_10.22.csv", na = "NaN", row.names = FALSE)

# export find_clean Europe to csv
write.csv(find_cl?an %>%
            filter(region == "Europe") %>%
            select(country, region, who_testing_capacity, max_new_tests_cap_avg, sequencing_capacity, submission_count, cases_newly_reported_in_last_7_days_per_100000_population, archetype_full) %>%
       ?    rename(., "Country" = country, "Region" = region, 'WHO testing Capacity' = who_testing_capacity, 'Max 30-day average of new tests per capita' = max_new_tests_cap_avg, 'Sequencing capacity' = sequencing_capacity, 'Cumulative GISAID sequences' = submissi?n_count, 'New cases per capita in the last 7 days per 100k' = cases_newly_reported_in_last_7_days_per_100000_population, "Archetype" = archetype_full),
          "C:\\Users\\bthrift\\Documents\\Projects\\FIND Map\\output_data\\EU_find_map_10.22.csv", na = ?NaN", row.names = FALSE)

# export find_clean South-East Asia to csv
write.csv(find_clean %>%
            filter(region == "South-East Asia") %>%
            select(country, region, who_testing_capacity, max_new_tests_cap_avg, sequencing_capacity, submissi?n_count, cases_newly_reported_in_last_7_days_per_100000_population, archetype_full) %>%
            rename(., "Country" = country, "Region" = region, 'WHO testing Capacity' = who_testing_capacity, 'Max 30-day average of new tests per capita' = max_new_test?_cap_avg, 'Sequencing capacity' = sequencing_capacity, 'Cumulative GISAID sequences' = submission_count, 'New cases per capita in the last 7 days per 100k' = cases_newly_reported_in_last_7_days_per_100000_population, "Archetype" = archetype_full),
        ? "C:\\Users\\bthrift\\Documents\\Projects\\FIND Map\\output_data\\SEAsia_find_map_10.22.csv", na = "NaN", row.names = FALSE)

# export find_clean Western Pacific to csv
write.csv(find_clean %>%
            filter(region == "Western Pacific") %>%
          ? select(country, region, who_testing_capacity, max_new_tests_cap_avg, sequencing_capacity, submission_count, cases_newly_reported_in_last_7_days_per_100000_population, archetype_full) %>%
            rename(., "Country" = country, "Region" = region, 'WHO t?sting Capacity' = who_testing_capacity, 'Max 30-day average of new tests per capita' = max_new_tests_cap_avg, 'Sequencing capacity' = sequencing_capacity, 'Cumulative GISAID sequences' = submission_count, 'New cases per capita in the last 7 days per 100k' ? cases_newly_reported_in_last_7_days_per_100000_population, "Archetype" = archetype_full),
          "C:\\Users\\bthrift\\Documents\\Projects\\FIND Map\\output_data\\Pacific_find_map_10.22.csv", na = "NaN", row.names = FALSE)
